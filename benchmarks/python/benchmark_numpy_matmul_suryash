from time_utils import measure_runtime, time_fn
import matplotlib.pyplot as plt
import json
import numpy as np
import datetime

def benchmark_complex_numpy_matmul(B, D, T):
    # randomly generate complex matrices
    def create_complex_matrix(shape):
        return np.random.uniform(size=shape) + 1j * np.random.uniform(size=shape)

    A = create_complex_matrix((B, T, D))
    Bmat = create_complex_matrix((D, D))  # shape aligns for (B, D, T) @ (T, D) → (B, D, D)

    # operation to benchmark
    def matmul_op():
        return np.matmul(A, Bmat)  # NumPy will broadcast over batch dimension

    # Measure runtime
    avg_time_ms = time_fn(lambda: np.matmul(A, Bmat), msg=f"MatMul {B}x{D}x{T}")
    return avg_time_ms


if __name__ == "__main__":
    save = True
    plot = True

    BATCH_SIZE = 8
    T = 512
    sizes = list(range(500, 6000, 500))  # this sweeps D
    times = []

    for D in sizes:
        print(f"Benchmarking complex A[{BATCH_SIZE}×{D}×{T}] @ B[{T}×{D}] matrices...")
        t = benchmark_complex_numpy_matmul(BATCH_SIZE, D, T)
        print(f" Time: {t:.2f} ms")
        times.append(t)

    stamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")

    if save == True:
        with open(f"numpy_complex_matmul_benchmark_{stamp}.json", "w") as f:
            json.dump({"B": BATCH_SIZE, "T": T, "sizes_D": sizes, "times": times}, f)

    # Plot results
    plt.figure(figsize=(10, 6))
    fig, ax1 = plt.subplots()

    ax2 = ax1.twinx()
    ax2.plot(sizes, times, 'o-', linewidth=2, color='red')
    ax2.set_ylabel("Execution Time (ms)", color='red')
    ax2.tick_params(axis='y', labelcolor='red')

    plt.title(f"NumPy Complex MatMul Performance • A[{BATCH_SIZE}×D×{T}] · B[{T}×D]")
    plt.xlabel("Matrix dimension D")
    plt.tight_layout()
    plt.savefig(f"{stamp}_numpy_complex_matmul_benchmark.png")
    plt.show()
